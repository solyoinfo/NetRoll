// Cropper wrapper (extracted)
window.netrollCropVersion = 'cropper-1.0.0';
window.netrollCrop = (function(){
  let cropper=null; let lastData=null;
  function ensureCropper(cb){ if(window.Cropper){ cb(); return; } const existing=document.getElementById('cropper-fallback-js'); if(!existing){ const js=document.createElement('script'); js.id='cropper-fallback-js'; js.src='https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.js'; js.onload=cb; document.head.appendChild(js);} else { existing.addEventListener('load', cb, { once:true }); } }
  function init(selector){ ensureCropper(()=>{ try{ if(!document.getElementById('croppercss')){ const l=document.createElement('link'); l.id='croppercss'; l.rel='stylesheet'; l.href='https://cdn.jsdelivr.net/npm/cropperjs@1.6.2/dist/cropper.min.css'; document.head.appendChild(l);} const img=document.querySelector(selector); if(!img) return; if(!img.complete||!img.naturalWidth){ img.addEventListener('load', function once(){ img.removeEventListener('load', once); requestAnimationFrame(()=>init(selector)); }, { once:true }); return; } if(cropper){ try{ cropper.destroy(); }catch(e){} cropper=null; } const previewEls=[...document.querySelectorAll('.preview-box')]; function updatePreviews(){ try{ const data=cropper.getData(); const imageData=cropper.getImageData(); if(!data||!imageData||!data.width||!data.height) return; previewEls.forEach(el=>{ if(!el) return; const pw=el.clientWidth||1, ph=el.clientHeight||1; const scale=Math.min(pw/data.width, ph/data.height); if(!isFinite(scale)||scale<=0) return; const newW=imageData.naturalWidth*scale, newH=imageData.naturalHeight*scale; const extraX=(pw-data.width*scale)/2, extraY=(ph-data.height*scale)/2; el.style.backgroundImage='url('+img.src+')'; el.style.backgroundSize=newW+'px '+newH+'px'; el.style.backgroundPosition=(-data.x*scale+extraX)+'px '+(-data.y*scale+extraY)+'px'; el.style.backgroundRepeat='no-repeat'; }); }catch(e){} }
    cropper=new Cropper(img,{ viewMode:1, dragMode:'move', autoCropArea:0.8, background:false, responsive:true, zoomOnWheel:true, zoomOnTouch:true, movable:true, cropBoxMovable:true, cropBoxResizable:true, ready(){ try{ const key=img.getAttribute('data-crop-key'); if(key){ try{ const saved=sessionStorage.getItem('crop:'+key); if(saved){ const obj=JSON.parse(saved); if(obj?.data) cropper.setData(obj.data); if(obj?.canvas) cropper.setCanvasData(obj.canvas); if(obj?.cropBox) cropper.setCropBoxData(obj.cropBox); } }catch(e){} } const data=cropper.getData(); const imgd=cropper.getImageData(); if(imgd && (!data||!data.width||!data.height)){ const w=imgd.naturalWidth*0.8, h=imgd.naturalHeight*0.8; const x=(imgd.naturalWidth-w)/2, y=(imgd.naturalHeight-h)/2; cropper.setData({x,y,width:w,height:h}); cropper.crop(); } updatePreviews(); }catch(e){} }, crop(){ try{ lastData=cropper.getData(); updatePreviews(); }catch(e){} }, cropmove(){ try{ updatePreviews(); }catch(e){} }, zoom(){ try{ updatePreviews(); }catch(e){} }, cropend(){ try{ const key=img.getAttribute('data-crop-key'); if(key){ const payload={ data:cropper.getData(), canvas:cropper.getCanvasData(), cropBox:cropper.getCropBoxData() }; sessionStorage.setItem('crop:'+key, JSON.stringify(payload)); } }catch(e){} } });
  }catch(e){} }); }
  function active(selector){ try{ const img=document.querySelector(selector); return !!(img && img.cropper); }catch(e){ return false; } }
  function getCurrentAspect(){ if(!cropper) return NaN; try{ const d=cropper.getData(); if(d&&d.width&&d.height) return d.width/d.height; }catch(e){} return NaN; }
  function ensureAspect(ratio){ if(!cropper) return; let t=NaN; if(ratio==='1:1') t=1; else if(ratio==='4:3') t=4/3; else if(ratio==='3:4') t=3/4; else if(ratio==='16:9') t=16/9; else if(ratio==='9:16') t=9/16; else if(ratio==='free') t=NaN; try{ if(isNaN(t)){ cropper.setAspectRatio(NaN); return; } const cur=getCurrentAspect(); if(isFinite(cur) && Math.abs(cur-t)/t < 0.01) return; cropper.setAspectRatio(t); }catch(e){} }
  function waitUpdate(){ return new Promise(res=>{ try{ requestAnimationFrame(()=>requestAnimationFrame(res)); }catch(e){ setTimeout(res,16); } }); }
  function setAspect(r){ if(!cropper) return; if(r==='free'){ cropper.setAspectRatio(NaN); } else if(r==='1:1'){ cropper.setAspectRatio(1);} else if(r==='4:3'){ cropper.setAspectRatio(4/3);} else if(r==='3:4'){ cropper.setAspectRatio(3/4);} else if(r==='16:9'){ cropper.setAspectRatio(16/9);} else if(r==='9:16'){ cropper.setAspectRatio(9/16);} else { cropper.setAspectRatio(NaN);} }
  function getRect(ratio){ if(!cropper) return null; try{ const data=cropper.getData(); if(data&&data.width&&data.height){ return { x:Math.round(Math.max(0,data.x)), y:Math.round(Math.max(0,data.y)), width:Math.round(Math.max(1,data.width)), height:Math.round(Math.max(1,data.height)) }; } }catch(e){} try{ const imgd=cropper.getImageData(); if(!imgd) return null; const natW=imgd.naturalWidth||0, natH=imgd.naturalHeight||0; if(natW<=1||natH<=1) return {x:0,y:0,width:1,height:1}; let ar=NaN; if(ratio==='1:1') ar=1; else if(ratio==='4:3') ar=4/3; else if(ratio==='3:4') ar=3/4; else if(ratio==='16:9') ar=16/9; else if(ratio==='9:16') ar=9/16; let w,h; if(isNaN(ar)){ w=natW*0.8; h=natH*0.8; } else { const imgAr=natW/natH; if(imgAr>ar){ h=natH*0.8; w=h*ar; } else { w=natW*0.8; h=w/ar; } } const x=(natW-w)/2, y=(natH-h)/2; return { x:Math.round(x), y:Math.round(y), width:Math.round(w), height:Math.round(h) }; }catch(e){ return null; } }
  function debug(){ if(!cropper){ console.log('no cropper'); return; } console.log('[crop-debug]', { lastData, liveData:cropper.getData(), cropBox:cropper.getCropBoxData(), canvas:cropper.getCanvasData(), image:cropper.getImageData() }); }
  return { init, active, getCurrentAspect, ensureAspect, waitUpdate, setAspect, getRect, debug };
})();
