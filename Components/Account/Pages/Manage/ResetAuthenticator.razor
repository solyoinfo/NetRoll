@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using NetRoll.Data
@using Microsoft.Extensions.Localization

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger
@inject IStringLocalizer<NetRoll.Components.Account.Pages.Manage.ResetAuthenticator> L

<PageTitle>@L["PageTitle"]</PageTitle>

<StatusMessage />
<h3>@L["Heading"]</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
    <strong>@L["WarningLine1"]</strong>
    </p>
    <p>
    @L["WarningLine2"]
    </p>
</div>
<div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
    <button class="btn btn-danger" type="submit">@L["ResetButton"]</button>
    </form>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            L["ResetStatus"],
            HttpContext);
    }
}
